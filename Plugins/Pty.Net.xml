<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pty.Net</name>
    </assembly>
    <members>
        <member name="T:Pty.Net.IPtyConnection">
            <summary>
            Connection to a running pseudoterminal process.
            </summary>
        </member>
        <member name="E:Pty.Net.IPtyConnection.ProcessExited">
            <summary>
            Event fired when the pty process exits.
            </summary>
        </member>
        <member name="P:Pty.Net.IPtyConnection.ReaderStream">
            <summary>
            Gets the stream for reading data from the pty.
            </summary>
        </member>
        <member name="P:Pty.Net.IPtyConnection.WriterStream">
            <summary>
            Gets the stream for writing data to the pty.
            </summary>
        </member>
        <member name="P:Pty.Net.IPtyConnection.Pid">
            <summary>
            Gets the pty process ID.
            </summary>
        </member>
        <member name="P:Pty.Net.IPtyConnection.ExitCode">
            <summary>
            Gets the pty process exit code.
            </summary>
        </member>
        <member name="M:Pty.Net.IPtyConnection.WaitForExit(System.Int32)">
            <summary>
            Wait for the pty process to exit up to a given timeout.
            </summary>
            <param name="milliseconds">Timeout to wait for the process to exit.</param>
            <returns>True if the process exists within the timeout, false otherwise.</returns>
        </member>
        <member name="M:Pty.Net.IPtyConnection.Kill">
            <summary>
            Immediately terminates the pty process.
            </summary>
        </member>
        <member name="M:Pty.Net.IPtyConnection.Resize(System.Int32,System.Int32)">
            <summary>
            Change the size of the pty.
            </summary>
            <param name="cols">The number of columns.</param>
            <param name="rows">The number of rows.</param>
        </member>
        <member name="T:Pty.Net.IPtyProvider">
            <summary>
            A provider of pseudoterminal connections.
            </summary>
        </member>
        <member name="M:Pty.Net.IPtyProvider.StartTerminalAsync(Pty.Net.PtyOptions,System.Diagnostics.TraceSource,System.Threading.CancellationToken)">
            <summary>
            Spawns a process as a pseudoterminal.
            </summary>
            <param name="options">The options for spawning the pty.</param>
            <param name="trace">The tracer to trace execution with.</param>
            <param name="cancellationToken">A token to cancel the task early.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that completes once the process has spawned.</returns>
        </member>
        <member name="T:Pty.Net.Linux.PtyConnection">
            <summary>
            A connection to a pseudoterminal on linux machines.
            </summary>
        </member>
        <member name="M:Pty.Net.Linux.PtyConnection.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Pty.Net.Linux.PtyConnection" /> class.
            </summary>
            <param name="controller">The fd of the pty controller.</param>
            <param name="pid">The id of the spawned process.</param>
        </member>
        <member name="M:Pty.Net.Linux.PtyConnection.Kill(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Pty.Net.Linux.PtyConnection.Resize(System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Pty.Net.Linux.PtyConnection.WaitPid(System.Int32,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="T:Pty.Net.Linux.PtyProvider">
            <summary>
            Provides a pty connection for linux machines.
            </summary>
        </member>
        <member name="M:Pty.Net.Linux.PtyProvider.StartTerminalAsync(Pty.Net.PtyOptions,System.Diagnostics.TraceSource,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Pty.Net.Mac.NativeMethods">
            <summary>
            Defines native types and methods for interop with Mac OS system APIs.
            </summary>
        </member>
        <member name="F:Pty.Net.Mac.NativeMethods.TermInputFlag.BRKINT">
            <summary>
            Map BREAK to SIGINTR
            </summary>
        </member>
        <member name="F:Pty.Net.Mac.NativeMethods.TermInputFlag.ICRNL">
            <summary>
            Map CR to NL (ala CRMOD)
            </summary>
        </member>
        <member name="F:Pty.Net.Mac.NativeMethods.TermInputFlag.IXON">
            <summary>
            Enable output flow control
            </summary>
        </member>
        <member name="F:Pty.Net.Mac.NativeMethods.TermInputFlag.IXANY">
            <summary>
            Any char will restart after stop
            </summary>
        </member>
        <member name="F:Pty.Net.Mac.NativeMethods.TermInputFlag.IMAXBEL">
            <summary>
            Ring bell on input queue full
            </summary>
        </member>
        <member name="F:Pty.Net.Mac.NativeMethods.TermInputFlag.IUTF8">
            <summary>
            Maintain state for UTF-8 VERASE
            </summary>
        </member>
        <member name="F:Pty.Net.Mac.NativeMethods.TermOuptutFlag.NONE">
            <summary>
            No output processing
            </summary>
        </member>
        <member name="F:Pty.Net.Mac.NativeMethods.TermOuptutFlag.OPOST">
            <summary>
            Enable following output processing
            </summary>
        </member>
        <member name="F:Pty.Net.Mac.NativeMethods.TermOuptutFlag.ONLCR">
            <summary>
            Map NL to CR-NL (ala CRMOD)
            </summary>
        </member>
        <member name="F:Pty.Net.Mac.NativeMethods.TermOuptutFlag.OCRNL">
            <summary>
            Map CR to NL
            </summary>
        </member>
        <member name="F:Pty.Net.Mac.NativeMethods.TermOuptutFlag.ONLRET">
            <summary>
            Don't output CR
            </summary>
        </member>
        <member name="F:Pty.Net.Mac.NativeMethods.TermConrolFlag.CS8">
            <summary>
            8 bits
            </summary>
        </member>
        <member name="F:Pty.Net.Mac.NativeMethods.TermConrolFlag.CREAD">
            <summary>
            Enable receiver
            </summary>
        </member>
        <member name="F:Pty.Net.Mac.NativeMethods.TermConrolFlag.HUPCL">
            <summary>
            Hang up on last close
            </summary>
        </member>
        <member name="F:Pty.Net.Mac.NativeMethods.TermLocalFlag.ECHOKE">
            <summary>
            Visual erase for line kill
            </summary>
        </member>
        <member name="F:Pty.Net.Mac.NativeMethods.TermLocalFlag.ECHOE">
            <summary>
            Visually erase chars
            </summary>
        </member>
        <member name="F:Pty.Net.Mac.NativeMethods.TermLocalFlag.ECHOK">
            <summary>
            Echo NL after line kill
            </summary>
        </member>
        <member name="F:Pty.Net.Mac.NativeMethods.TermLocalFlag.ECHO">
            <summary>
            Enable echoing
            </summary>
        </member>
        <member name="F:Pty.Net.Mac.NativeMethods.TermLocalFlag.ECHOCTL">
            <summary>
            Echo control chars as ^(Char)
            </summary>
        </member>
        <member name="F:Pty.Net.Mac.NativeMethods.TermLocalFlag.ISIG">
            <summary>
            Enable signals INTR, QUIT, [D]SUSP
            </summary>
        </member>
        <member name="F:Pty.Net.Mac.NativeMethods.TermLocalFlag.ICANON">
            <summary>
            Canonicalize input lines
            </summary>
        </member>
        <member name="F:Pty.Net.Mac.NativeMethods.TermLocalFlag.IEXTEN">
            <summary>
            Enable DISCARD and LNEXT
            </summary>
        </member>
        <member name="T:Pty.Net.Mac.PtyConnection">
            <summary>
            A connection to a pseudoterminal on MacOS machines.
            </summary>
        </member>
        <member name="M:Pty.Net.Mac.PtyConnection.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Pty.Net.Mac.PtyConnection" /> class.
            </summary>
            <param name="controller">The fd of the pty controller.</param>
            <param name="pid">The id of the spawned process.</param>
        </member>
        <member name="M:Pty.Net.Mac.PtyConnection.Kill(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Pty.Net.Mac.PtyConnection.Resize(System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Pty.Net.Mac.PtyConnection.WaitPid(System.Int32,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="T:Pty.Net.Mac.PtyProvider">
            <summary>
            Provides a pty connection for MacOS machines.
            </summary>
        </member>
        <member name="M:Pty.Net.Mac.PtyProvider.StartTerminalAsync(Pty.Net.PtyOptions,System.Diagnostics.TraceSource,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Pty.Net.PlatformServices">
            <summary>
            Provides platform specific functionality.
            </summary>
        </member>
        <member name="P:Pty.Net.PlatformServices.PtyProvider">
            <summary>
            Gets the <see cref="T:Pty.Net.IPtyProvider" /> for the current platform.
            </summary>
        </member>
        <member name="P:Pty.Net.PlatformServices.EnvironmentVariableComparer">
            <summary>
            Gets the comparer to determine if two environment variable keys are equivalent on the current platform.
            </summary>
        </member>
        <member name="P:Pty.Net.PlatformServices.PtyEnvironment">
            <summary>
            Gets specific environment variables that are needed when spawning the PTY.
            </summary>
        </member>
        <member name="T:Pty.Net.PtyExitedEventArgs">
            <summary>
            Event arguments that encapsulate data about the pty process exit.
            </summary>
        </member>
        <member name="M:Pty.Net.PtyExitedEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Pty.Net.PtyExitedEventArgs" /> class.
            </summary>
            <param name="exitCode">Exit code of the pty process.</param>
        </member>
        <member name="P:Pty.Net.PtyExitedEventArgs.ExitCode">
            <summary>
            Gets or sets the exit code of the pty process.
            </summary>
        </member>
        <member name="T:Pty.Net.PtyOptions">
            <summary>
            Options for spawning a new pty process.
            </summary>
        </member>
        <member name="P:Pty.Net.PtyOptions.Name">
            <summary>
            Gets or sets the terminal name.
            </summary>
        </member>
        <member name="P:Pty.Net.PtyOptions.Rows">
            <summary>
            Gets or sets the number of initial rows.
            </summary>
        </member>
        <member name="P:Pty.Net.PtyOptions.Cols">
            <summary>
            Gets or sets the number of initial columns.
            </summary>
        </member>
        <member name="P:Pty.Net.PtyOptions.Cwd">
            <summary>
            Gets or sets the working directory for the spawned process.
            </summary>
        </member>
        <member name="P:Pty.Net.PtyOptions.App">
            <summary>
            Gets or sets the path to the process to be spawned.
            </summary>
        </member>
        <member name="P:Pty.Net.PtyOptions.CommandLine">
            <summary>
            Gets or sets the command line arguments to the process.
            </summary>
        </member>
        <member name="P:Pty.Net.PtyOptions.VerbatimCommandLine">
            <summary>
            Gets or sets a value indicating whether command line arguments must be quoted.
            <c>false</c>, the default, means that the arguments must be quoted and quotes inside escaped then concatenated with spaces.
            <c>true</c> means that the arguments must not be quoted and just concatenated with spaces.
            </summary>
        </member>
        <member name="P:Pty.Net.PtyOptions.ForceWinPty">
            <summary>
            Gets or sets a value indicating whether WinPty should be forced as the windows backend even on systems where ConPty is available.
            </summary>
        </member>
        <member name="P:Pty.Net.PtyOptions.Environment">
            <summary>
            Gets or sets the process' environment variables.
            </summary>
        </member>
        <member name="T:Pty.Net.PtyProvider">
            <summary>
            Provides the ability to spawn new processes under a pseudoterminal.
            </summary>
        </member>
        <member name="M:Pty.Net.PtyProvider.SpawnAsync(Pty.Net.PtyOptions,System.Threading.CancellationToken)">
            <summary>
            Spawn a new process connected to a pseudoterminal.
            </summary>
            <param name="options">The set of options for creating the pseudoterminal.</param>
            <param name="cancellationToken">The token to cancel process creation early.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that completes once the process has spawned.</returns>
        </member>
        <member name="T:Pty.Net.Unix.PtyConnection">
            <summary>
            A connection to a Unix-style pseudoterminal.
            </summary>
        </member>
        <member name="M:Pty.Net.Unix.PtyConnection.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Pty.Net.Unix.PtyConnection" /> class.
            </summary>
            <param name="controller">The fd of the pty controller.</param>
            <param name="pid">The id of the spawned process.</param>
        </member>
        <member name="E:Pty.Net.Unix.PtyConnection.ProcessExited">
            <inheritdoc />
        </member>
        <member name="P:Pty.Net.Unix.PtyConnection.ReaderStream">
            <inheritdoc />
        </member>
        <member name="P:Pty.Net.Unix.PtyConnection.WriterStream">
            <inheritdoc />
        </member>
        <member name="P:Pty.Net.Unix.PtyConnection.Pid">
            <inheritdoc />
        </member>
        <member name="P:Pty.Net.Unix.PtyConnection.ExitCode">
            <inheritdoc />
        </member>
        <member name="M:Pty.Net.Unix.PtyConnection.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Pty.Net.Unix.PtyConnection.Kill">
            <inheritdoc />
        </member>
        <member name="M:Pty.Net.Unix.PtyConnection.Resize(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Pty.Net.Unix.PtyConnection.WaitForExit(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Pty.Net.Unix.PtyConnection.Resize(System.Int32,System.Int32,System.Int32)">
            <summary>
            OS-specific implementation of the pty-resize function.
            </summary>
            <param name="controller">The fd of the pty controller.</param>
            <param name="cols">The number of columns to resize to.</param>
            <param name="rows">The number of rows to resize to.</param>
            <returns>True if the function suceeded to resize the pty, false otherwise.</returns>
        </member>
        <member name="M:Pty.Net.Unix.PtyConnection.Kill(System.Int32)">
            <summary>
            Kills the terminal process.
            </summary>
            <param name="controller">The fd of the pty controller.</param>
            <returns>True if the function succeeded in killing the process, false otherwise.</returns>
        </member>
        <member name="M:Pty.Net.Unix.PtyConnection.WaitPid(System.Int32,System.Int32@)">
            <summary>
            OS-specific implementation of waiting on the given process id.
            </summary>
            <param name="pid">The process id to wait on.</param>
            <param name="status">The status of the process.</param>
            <returns>True if the function succeeded to get the status of the process, false otherwise.</returns>
        </member>
        <member name="T:Pty.Net.Unix.PtyProvider">
            <summary>
            Abstract class that provides a pty connection for unix-like machines.
            </summary>
        </member>
        <member name="M:Pty.Net.Unix.PtyProvider.StartTerminalAsync(Pty.Net.PtyOptions,System.Diagnostics.TraceSource,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Pty.Net.Unix.PtyProvider.GetExecvpArgs(Pty.Net.PtyOptions)">
            <summary>
            Gets the arguments to pass to execvp.
            </summary>
            <param name="options">The options for spawning the pty.</param>
            <returns>An array of arguments to pass to execvp.</returns>
        </member>
        <member name="T:Pty.Net.Unix.PtyStream">
            <summary>
            A stream connected to a pty.
            </summary>
        </member>
        <member name="M:Pty.Net.Unix.PtyStream.#ctor(System.Int32,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:Pty.Net.Unix.PtyStream" /> class.
            </summary>
            <param name="fd">The fd to connect the stream to.</param>
            <param name="fileAccess">The access permissions to set on the fd.</param>
        </member>
        <member name="P:Pty.Net.Unix.PtyStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="M:Pty.Net.Windows.NativeMethods.STARTUPINFOEX.InitAttributeListAttachedToConPTY(Pty.Net.Windows.NativeMethods.SafePseudoConsoleHandle)">
            <summary>
            Initializes the specified startup info struct with the required properties and
            updates its thread attribute list with the specified ConPTY handle.
            </summary>
            <param name="handle">Pseudo console handle.</param>
        </member>
        <member name="M:Pty.Net.Windows.NativeMethods.SafeKernelHandle.InitialSetHandle(System.IntPtr)">
            <summary>
            Use this method with the default constructor to allow the memory allocation
            for the handle to happen before the CER call to get it.
            </summary>
            <param name="handle">The native handle.</param>
        </member>
        <member name="T:Pty.Net.Windows.PseudoConsoleConnection">
            <summary>
            A connection to a pseudoterminal spawned by native windows APIs.
            </summary>
        </member>
        <member name="M:Pty.Net.Windows.PseudoConsoleConnection.#ctor(Pty.Net.Windows.PseudoConsoleConnection.PseudoConsoleConnectionHandles)">
            <summary>
            Initializes a new instance of the <see cref="T:Pty.Net.Windows.PseudoConsoleConnection" /> class.
            </summary>
            <param name="handles">The set of handles associated with the pseudoconsole.</param>
        </member>
        <member name="E:Pty.Net.Windows.PseudoConsoleConnection.ProcessExited">
            <inheritdoc />
        </member>
        <member name="P:Pty.Net.Windows.PseudoConsoleConnection.ReaderStream">
            <inheritdoc />
        </member>
        <member name="P:Pty.Net.Windows.PseudoConsoleConnection.WriterStream">
            <inheritdoc />
        </member>
        <member name="P:Pty.Net.Windows.PseudoConsoleConnection.Pid">
            <inheritdoc />
        </member>
        <member name="P:Pty.Net.Windows.PseudoConsoleConnection.ExitCode">
            <inheritdoc />
        </member>
        <member name="M:Pty.Net.Windows.PseudoConsoleConnection.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Pty.Net.Windows.PseudoConsoleConnection.Kill">
            <inheritdoc />
        </member>
        <member name="M:Pty.Net.Windows.PseudoConsoleConnection.Resize(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Pty.Net.Windows.PseudoConsoleConnection.WaitForExit(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Pty.Net.Windows.PseudoConsoleConnection.PseudoConsoleConnectionHandles">
            <summary>
            handles to resources creates when a pseudoconsole is spawned.
            </summary>
        </member>
        <member name="M:Pty.Net.Windows.PseudoConsoleConnection.PseudoConsoleConnectionHandles.#ctor(Pty.Net.Windows.NativeMethods.SafePipeHandle,Pty.Net.Windows.NativeMethods.SafePipeHandle,Pty.Net.Windows.NativeMethods.SafePipeHandle,Pty.Net.Windows.NativeMethods.SafePipeHandle,Pty.Net.Windows.NativeMethods.SafePseudoConsoleHandle,Pty.Net.Windows.NativeMethods.SafeProcessHandle,System.Int32,Pty.Net.Windows.NativeMethods.SafeThreadHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:Pty.Net.Windows.PseudoConsoleConnection.PseudoConsoleConnectionHandles" /> class.
            </summary>
            <param name="inPipePseudoConsoleSide">the input pipe on the pseudoconsole side.</param>
            <param name="outPipePseudoConsoleSide">the output pipe on the pseudoconsole side.</param>
            <param name="inPipeOurSide"> the input pipe on the local side.</param>
            <param name="outPipeOurSide"> the output pipe on the local side.</param>
            <param name="pseudoConsoleHandle">the handle to the pseudoconsole.</param>
            <param name="processHandle">the handle to the spawned process.</param>
            <param name="pid">the process ID.</param>
            <param name="mainThreadHandle">the handle to the main thread.</param>
        </member>
        <member name="P:Pty.Net.Windows.PseudoConsoleConnection.PseudoConsoleConnectionHandles.InPipePseudoConsoleSide">
            <summary>
            Gets the input pipe on the pseudoconsole side.
            </summary>
            <remarks>
            This pipe is connected to <see cref="P:Pty.Net.Windows.PseudoConsoleConnection.PseudoConsoleConnectionHandles.OutPipeOurSide" />.
            </remarks>
        </member>
        <member name="P:Pty.Net.Windows.PseudoConsoleConnection.PseudoConsoleConnectionHandles.OutPipePseudoConsoleSide">
            <summary>
            Gets the output pipe on the pseudoconsole side.
            </summary>
            <remarks>
            This pipe is connected to <see cref="P:Pty.Net.Windows.PseudoConsoleConnection.PseudoConsoleConnectionHandles.InPipeOurSide" />.
            </remarks>
        </member>
        <member name="P:Pty.Net.Windows.PseudoConsoleConnection.PseudoConsoleConnectionHandles.InPipeOurSide">
            <summary>
            Gets the input pipe on the local side.
            </summary>
            <remarks>
            This pipe is connected to <see cref="P:Pty.Net.Windows.PseudoConsoleConnection.PseudoConsoleConnectionHandles.OutPipePseudoConsoleSide" />.
            </remarks>
        </member>
        <member name="P:Pty.Net.Windows.PseudoConsoleConnection.PseudoConsoleConnectionHandles.OutPipeOurSide">
            <summary>
            Gets the output pipe on the local side.
            </summary>
            <remarks>
            This pipe is connected to <see cref="P:Pty.Net.Windows.PseudoConsoleConnection.PseudoConsoleConnectionHandles.InPipePseudoConsoleSide" />.
            </remarks>
        </member>
        <member name="P:Pty.Net.Windows.PseudoConsoleConnection.PseudoConsoleConnectionHandles.PseudoConsoleHandle">
            <summary>
            Gets the handle to the pseudoconsole.
            </summary>
        </member>
        <member name="P:Pty.Net.Windows.PseudoConsoleConnection.PseudoConsoleConnectionHandles.ProcessHandle">
            <summary>
            Gets the handle to the spawned process.
            </summary>
        </member>
        <member name="P:Pty.Net.Windows.PseudoConsoleConnection.PseudoConsoleConnectionHandles.Pid">
            <summary>
            Gets the process ID.
            </summary>
        </member>
        <member name="P:Pty.Net.Windows.PseudoConsoleConnection.PseudoConsoleConnectionHandles.MainThreadHandle">
            <summary>
            Gets the handle to the main thread.
            </summary>
        </member>
        <member name="T:Pty.Net.Windows.PtyProvider">
            <summary>
            Provides a pty connection for windows machines.
            </summary>
        </member>
        <member name="M:Pty.Net.Windows.PtyProvider.StartTerminalAsync(Pty.Net.PtyOptions,System.Diagnostics.TraceSource,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Pty.Net.Windows.WindowsArguments">
            <summary>
            Helper class for formatting windows arguments when passing them to winpty and conpty.
            </summary>
        </member>
        <member name="M:Pty.Net.Windows.WindowsArguments.Format(System.String[])">
            <summary>
            Quotes each argument before joining together.
            </summary>
            <param name="args">The command line arguments to format.</param>
            <returns>a space-delimited list of command line arguments, each entry surrounded by quotes.</returns>
        </member>
        <member name="M:Pty.Net.Windows.WindowsArguments.FormatVerbatim(System.String[])">
            <summary>
            Joins the arguments together witout modification.
            </summary>
            <param name="args">The command line arguments to format.</param>
            <returns>A space-delimited list of command line arguments.</returns>
        </member>
        <member name="T:Pty.Net.Windows.WinPtyConnection">
            <summary>
            A connection to a pseudoterminal spawned via winpty.
            </summary>
        </member>
        <member name="M:Pty.Net.Windows.WinPtyConnection.#ctor(System.IO.Stream,System.IO.Stream,System.IntPtr,Pty.Net.Windows.NativeMethods.SafeProcessHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:Pty.Net.Windows.WinPtyConnection" /> class.
            </summary>
            <param name="readerStream">The reading side of the pty connection.</param>
            <param name="writerStream">The writing side of the pty connection.</param>
            <param name="handle">A handle to the winpty instance.</param>
            <param name="processHandle">A handle to the spawned process.</param>
        </member>
        <member name="E:Pty.Net.Windows.WinPtyConnection.ProcessExited">
            <inheritdoc />
        </member>
        <member name="P:Pty.Net.Windows.WinPtyConnection.ReaderStream">
            <inheritdoc />
        </member>
        <member name="P:Pty.Net.Windows.WinPtyConnection.WriterStream">
            <inheritdoc />
        </member>
        <member name="P:Pty.Net.Windows.WinPtyConnection.Pid">
            <inheritdoc />
        </member>
        <member name="P:Pty.Net.Windows.WinPtyConnection.ExitCode">
            <inheritdoc />
        </member>
        <member name="M:Pty.Net.Windows.WinPtyConnection.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Pty.Net.Windows.WinPtyConnection.Kill">
            <inheritdoc />
        </member>
        <member name="M:Pty.Net.Windows.WinPtyConnection.Resize(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Pty.Net.Windows.WinPtyConnection.WaitForExit(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Pty.Net.Windows.WinptyLpwstrMarshaler">
            <summary>
            Marshals a LPWStr (wchar_t *) to a string without destroying the LPWStr, this is needed by winpty.
            </summary>
        </member>
        <member name="M:Pty.Net.Windows.WinptyLpwstrMarshaler.GetInstance(System.String)">
            <summary>
            Required method on <see cref="T:System.Runtime.InteropServices.ICustomMarshaler" /> on order to work with native methods.
            </summary>
            <param name="cookie">passed in cookie token.</param>
            <returns>The static instance of this <see cref="T:Pty.Net.Windows.WinptyLpwstrMarshaler" />.</returns>
        </member>
        <member name="M:Pty.Net.Windows.WinptyLpwstrMarshaler.MarshalNativeToManaged(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Pty.Net.Windows.WinptyLpwstrMarshaler.CleanUpNativeData(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Pty.Net.Windows.WinptyLpwstrMarshaler.GetNativeDataSize">
            <inheritdoc />
        </member>
        <member name="M:Pty.Net.Windows.WinptyLpwstrMarshaler.MarshalManagedToNative(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Pty.Net.Windows.WinptyLpwstrMarshaler.CleanUpManagedData(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Pty.Net.Windows.WinptyNativeInterop">
            <summary>
            Native interop definitions for winpty.
            </summary>
        </member>
        <member name="F:Pty.Net.Windows.WinptyNativeInterop.WinptyNativeDll">
            <summary>
            Relative path to the winpty.dll.
            </summary>
        </member>
        <member name="F:Pty.Net.Windows.WinptyNativeInterop.WINPTY_FLAG_CONERR">
            <summary>
            Create a new screen buffer(connected to the "conerr" terminal pipe) and
            pass it to child processes as the STDERR handle.This flag also prevents
            the agent from reopening CONOUT$ when it polls -- regardless of whether the
            active screen buffer changes, winpty continues to monitor the original
            primary screen buffer.
            </summary>
        </member>
        <member name="F:Pty.Net.Windows.WinptyNativeInterop.WINPTY_FLAG_PLAIN_OUTPUT">
            <summary>
            Don't output escape sequences.
            </summary>
        </member>
        <member name="F:Pty.Net.Windows.WinptyNativeInterop.WINPTY_FLAG_COLOR_ESCAPES">
            <summary>
            Do output color escape sequences.  These escapes are output by default, but
            are suppressed with WINPTY_FLAG_PLAIN_OUTPUT.  Use this flag to reenable
            them.
            </summary>
        </member>
        <member name="F:Pty.Net.Windows.WinptyNativeInterop.WINPTY_FLAG_ALLOW_CURPROC_DESKTOP_CREATION">
            <summary>
            On XP and Vista, winpty needs to put the hidden console on a desktop in a
            service window station so that its polling does not interfere with other
            (visible) console windows.  To create this desktop, it must change the
            process' window station (i.e. SetProcessWindowStation) for the duration of
            the winpty_open call.  In theory, this change could interfere with the
            winpty client (e.g. other threads, spawning children), so winpty by default
            spawns a special agent process to create the hidden desktop.  Spawning
            processes on Windows is slow, though, so if
            WINPTY_FLAG_ALLOW_CURPROC_DESKTOP_CREATION is set, winpty changes this
            process' window station instead.
            See https://github.com/rprichard/winpty/issues/58.
            </summary>
        </member>
        <member name="F:Pty.Net.Windows.WinptyNativeInterop.WINPTY_MOUSE_MODE_NONE">
            <summary>
            QuickEdit mode is initially disabled, and the agent does not send mouse
            mode sequences to the terminal.  If it receives mouse input, though, it
            still writes MOUSE_EVENT_RECORD values into CONIN.
            </summary>
        </member>
        <member name="F:Pty.Net.Windows.WinptyNativeInterop.WINPTY_MOUSE_MODE_AUTO">
             <summary>
             QuickEdit mode is initially enabled.  As CONIN enters or leaves mouse
             input mode (i.e. where ENABLE_MOUSE_INPUT is on and ENABLE_QUICK_EDIT_MODE
             is off), the agent enables or disables mouse input on the terminal.
            
             This is the default mode.
             </summary>
        </member>
        <member name="F:Pty.Net.Windows.WinptyNativeInterop.WINPTY_MOUSE_MODE_FORCE">
            <summary>
            QuickEdit mode is initially disabled, and the agent enables the terminal's
            mouse input mode.  It does not disable terminal mouse mode (until exit).
            </summary>
        </member>
        <member name="F:Pty.Net.Windows.WinptyNativeInterop.WINPTY_SPAWN_FLAG_AUTO_SHUTDOWN">
            <summary>
            If the spawn is marked "auto-shutdown", then the agent shuts down console
            output once the process exits.  The agent stops polling for new console
            output, and once all pending data has been written to the output pipe, the
            agent closes the pipe.  (At that point, the pipe may still have data in it,
            which the client may read.  Once all the data has been read, further reads
            return EOF.)
            </summary>
        </member>
        <member name="F:Pty.Net.Windows.WinptyNativeInterop.WINPTY_SPAWN_FLAG_EXIT_AFTER_SHUTDOWN">
             <summary>
             After the agent shuts down output, and after all output has been written
             into the pipe(s), exit the agent by closing the console.  If there any
             surviving processes still attached to the console, they are killed.
            
             Note: With this flag, an RPC call (e.g. winpty_set_size) issued after the
             agent exits will fail with an I/O or dead-agent error.
             </summary>
        </member>
        <member name="F:Pty.Net.Windows.WinptyNativeInterop.WINPTY_SPAWN_FLAG_MASK">
            <summary>
            All the spawn flags.
            </summary>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>7Q4H6/eLMkmHsI6mImnxe5yCkUjVYQKbnvL5qpYAafo=</DigestValue></Reference></SignedInfo><SignatureValue>Itmhryv8j+UX5QUztKm+kmO74pv+8fuzSdBRbjT8FZIIEORqHQOVTMhiUbTExhidWFWUUY1xZ1ZI1uATrmmTIlc22Il6hYfokYsrvFLVuRtzR9K57DLnI8OM5X2p87m0AGUt4zqUuLkvgW6NE0gn5O6xryj5mJMCmGMBzQPIXogfyrZ0wqRuTtc5olLDffihsRSoMpd/ulPs/zIg55Tzy5qfT33I5cBebxmsFaMHzVjuMvS1SlfLpTApDeCuADd05mmoGrKvDNoKc58YLjLG6Y+zWrJ7O7+hrI+uRQtYUjV4SJJ1ezlj9jYZKSrxtWqNbSvCtIdlZjq2PAcjN6B5ew==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>6yM7GOtjJiq83q4Ju1HJ7vg7kh3YM0WVQiBovQmpRa4cLYivtxSA85TmG7P88x8Liwt4Yq+ecFYB6GguJYkMEOtMFckdexGT2uAUNvAuQEZcan7Xadx/Ea11m1cr0GlJwUFWTO91w8hldaFD2RhxlrYHarQVHetFY5xTyAkn/KZxYoreob0sR+SFViNIjp36nV2KD1lLVVDJlaltcgV9DbW0JUhyFOoZT76Pf7qir5IxVBQNi2wvQFkGyZh/tbjNJeJw0inwqnHL3SOZd84xJPclElJodSEIQxZ/uUi9iZpwhdI2RGeH+RxO8pAz/qIgN0Pn4SgrHoPtGhB4vg0T2Q==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">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</CounterSignature></Object></Signature></doc>
